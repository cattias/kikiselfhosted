apiVersion: batch/v1
kind: CronJob
metadata:
  name: daily-postgres-hostpath-backup
  namespace: photos
spec:
  schedule: "0 23 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: postgres-backup-runner
            image: postgres:latest
            imagePullPolicy: IfNotPresent
            
            env:
            - name: PGHOST
              valueFrom:
                secretKeyRef:
                  name: immich-db-app
                  key: host
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: immich-db-app
                  key: user
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: immich-db-app
                  key: password
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: immich-db-app
                  key: dbname

            volumeMounts:
            - name: backup-storage
              mountPath: "/mnt/nfs-backup"

            command: ["/bin/bash", "-c"]
            args:
              - |
                BACKUP_DIR="/mnt/nfs-backup"
                TIMESTAMP=$(date +%Y%m%d_%H%M%S)
                # Filename now includes the database name and uses .dump extension for Custom Format
                FILENAME="${POSTGRES_DB}_dump_${TIMESTAMP}.dump.gz"
                
                echo "Starting PostgreSQL backup for database ${POSTGRES_DB} on ${PGHOST}..."
                
                # Check if the backup directory is writable
                if [ ! -w "${BACKUP_DIR}" ]; then
                  echo "ERROR: Backup directory ${BACKUP_DIR} is not writable or not mounted!"
                  exit 1
                fi
                
                # Execute the single database dump using Custom format (-Fc)
                # This is more efficient than plain SQL and suitable for restoration via pg_restore.
                # Pipes the compressed output to the NFS share
                pg_dump -Fc \
                  -h ${PGHOST} \
                  -U ${PGUSER} \
                  -d ${POSTGRES_DB} \
                  | gzip > ${BACKUP_DIR}/${FILENAME}
                  
                # Check the exit status of the pg_dump process
                if [ $? -eq 0 ]; then
                  echo "Backup successful! File saved to: ${BACKUP_DIR}/${FILENAME}"
                  # You can add clean-up or notification steps here
                else
                  echo "ERROR: pg_dump or gzip failed. Check database name and user permissions."
                  exit 1
                fi

          volumes:
          - name: backup-storage
            hostPath:
              path: "/mnt/plex/immich_backups" 
              type: DirectoryOrCreate
