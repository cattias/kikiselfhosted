# This CronJob runs daily, executes the pg_dumpall command, compresses the output, 
# and saves the resulting file to the mounted NFS Persistent Volume Claim (PVC).

apiVersion: batch/v1
kind: CronJob
metadata:
  name: daily-postgres-nfs-backup
spec:
  # Schedule: Run every day at 02:00 AM UTC.
  schedule: "0 2 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: postgres-backup-runner
            # Use the official Postgres image, which includes pg_dump and psql tools
            image: postgres:latest
            imagePullPolicy: IfNotPresent
            
            # Define environment variables sourced from the Secret
            env:
            - name: PGHOST
              valueFrom:
                secretKeyRef:
                  name: vaultwarden-db-app
                  key: host
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: vaultwarden-db-app
                  key: user
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: vaultwarden-db-app
                  key: password

            # Volume Mount: Mount the PVC to a local directory for saving the dump
            volumeMounts:
            - name: backup-storage
              mountPath: "/mnt/nfs-backup"

            # Command: The core backup script
            # 1. Sets the destination directory and filename with a timestamp.
            # 2. Uses pg_dumpall to create a full dump (including global objects like users/roles).
            # 3. Pipes the output to gzip for compression.
            # 4. Saves the final file to the NFS mount point.
            # We use /bin/bash -c for the multi-line shell command.
            command: ["/bin/bash", "-c"]
            args:
              - |
                BACKUP_DIR="/mnt/nfs-backup"
                TIMESTAMP=$(date +%Y%m%d_%H%M%S)
                FILENAME="full_postgres_dump_${TIMESTAMP}.sql.gz"
                
                echo "Starting PostgreSQL backup for ${PGHOST}..."
                
                # Check if the backup directory is writable
                if [ ! -w "${BACKUP_DIR}" ]; then
                  echo "ERROR: Backup directory ${BACKUP_DIR} is not writable or not mounted!"
                  exit 1
                fi
                
                # Execute the full dump, compress it, and save to the NFS share
                pg_dumpall \
                  -h ${PGHOST} \
                  -U ${PGUSER} \
                  | gzip > ${BACKUP_DIR}/${FILENAME}
                  
                # Check the exit status of the pg_dumpall process
                if [ $? -eq 0 ]; then
                  echo "Backup successful! File saved to: ${BACKUP_DIR}/${FILENAME}"
                  # You can add clean-up or notification steps here
                else
                  echo "ERROR: pg_dumpall or gzip failed."
                  exit 1
                fi
          
          # Volume Definition: Reference the PVC created previously
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: backup-pvc

